# --- 2. リスト ---
# 複数の値を順番にまとめて管理するためのデータ型です。
# コンピュータビジョンでは、座標(x, y)や色(R, G, B)などを扱う際によく使われます。

# --- リストの作成 ---
# [] の中に値をカンマ(,)で区切って入れます。
colors = ["red", "green", "blue"]
point = [100, 50] # x, y座標
print("色のリスト:", colors)
print("座標:", point)

# --- 要素へのアクセス (インデックス) ---
# リストの各要素には、先頭から0, 1, 2... という番号（インデックス）がついています。
# このインデックスを使って、特定の要素を取り出すことができます。
red_color = colors[0]
y_coordinate = point[1]
print("最初の色:", red_color)
print("Y座標:", y_coordinate)

# --- リストの末尾に要素を追加 (append) ---
colors.append("yellow")
print("追加後の色のリスト:", colors)


# --- 練習問題 ---
# 1. 3つの点の座標 (x, y) を表すリスト `points` を作成してください。
#    - 1点目: (50, 100)
#    - 2点目: (120, 80)
#    - 3点目: (200, 250)
#    ヒント: リストの中にリストを入れる「ネスト構造」になります。
#
# 2. `points` リストから、2点目のY座標 (80) を取り出して表示してください。
#
# 3. `points` リストに、新しい点 (300, 150) を追加してください。
#
# 4. 追加後の `points` リスト全体を表示してください。

# --- ここにコードを書いてください ---


# ------------------------------------
